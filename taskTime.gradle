class BuildTimeListener implements TaskExecutionListener, BuildListener {

    //用来记录 task 的执行时长信息
    Map<String, TaskTimeInfo> taskTimeMap = new HashMap<>()

    @Override
    void settingsEvaluated(Settings settings) {

    }

    @Override
    void projectsLoaded(Gradle gradle) {

    }

    @Override
    void projectsEvaluated(Gradle gradle) {

    }

    @Override
    void beforeExecute(Task task) {
        TaskTimeInfo timeInfo = new TaskTimeInfo()
        timeInfo.start = System.currentTimeMillis()
        timeInfo.path = task.getPath()
        taskTimeMap.put(task.getPath(), timeInfo)
    }

    @Override
    void afterExecute(Task task, TaskState taskState) {
        TaskTimeInfo timeInfo = taskTimeMap.get(task.getPath())
        timeInfo.end = System.currentTimeMillis()
        timeInfo.total = timeInfo.end - timeInfo.start
    }

    @Override
    void buildFinished(BuildResult buildResult) {
        List<TaskTimeInfo> taskTimeInfos = new ArrayList<>(taskTimeMap.values())
        Collections.sort(taskTimeInfos, new Comparator<TaskTimeInfo>() {
            @Override
            int compare(TaskTimeInfo t0, TaskTimeInfo t1) {
                return t0.total < t1.total ? -1 : (t0.total > t1.total ? 1 : 0)
            }
        })
        long allTotal = 0L
        long moreThan = 5L
        StringBuilder sb = new StringBuilder()
        taskTimeInfos.each { info ->
            {
                if (info.total > moreThan /**&& info.path.matches(".*Asm.*")**/) {
                    sb.append(String.format("%6sms [%s]", info.total, info.path))
                    sb.append("\n")
                }
                allTotal += (info.total)
            }
        }
        def totalPrefix = "-----build finished, all task cost total ${allTotal / 1000.0f}s------part task >=${moreThan}ms:\n"
        def log = "${totalPrefix}${sb.toString()}"
        println(log)
        if (Utils.localPropertyOf("taskTimeLog", "false").toBoolean()) {
            def formattedTime = LocalDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"))
            Utils.appendFile("${formattedTime}\n${log}\n")
        }
    }


}

class TaskTimeInfo {
    public long total
    public String path
    public long start
    public long end
}

project.gradle.addListener(new BuildTimeListener())

class Utils {
// 追加内容到文件
    static void appendFile(String content) {

        def file = new File("taskTimeLog.txt",)
        def writer = new FileWriter(file, true)
        try {
            writer.append(content)
            println("Content has been successfully appended to the file.")
        } catch (IOException e) {
            println("An error occurred while appending to the file: ${e.message}")
        } finally {
            writer.close()
        }
    }

    static String localPropertyOf(String key, String defValue) {
        Properties properties = new Properties()
        properties.load(new FileInputStream(new File('local.properties')))
        return properties.getProperty(key, defValue)
    }
}


